● (client MySQL ln2Comm) :
mysql -u <user> -p<MdP, sans espace avant> -h <host> -P <n°Port>  <BdD>


♦(MySQL) commandes notables :
	mysql -u <userW> -p		→ le «-p» sans param fait demander le MdP
	source,	\.

♦(MySQL) changer le prompt :
	prompt <chaîne>,
	l'envVar $MYSQL_PS1,
	l'option --prompt="..."
	la configuration au sein d'un .cnf : prompt=

♦(MySQL sous Debian) fichiers de config :
MySQL lit tout les *.cnf sous /etc/mysql/ ;
/etc/mysql/my.cnf : pour la config personnalisée

● métacommandes SQLite & Cie :
«.tables» == «SELECT name FROM sqlite_master» → liste les tables présentes

┌── la même chose à peu de choses près :
│«.schema <nomTable>» → liste commandes ayant créé la table
│«pragma table_info(<nomTable>)» → affiche la structure d'une table
└──

.databases → liste des BD ouvertes



● (sqlite) COMMANDES SPÉCIFIQUES À L'INTERFACE EN LN-DE-COMM :
• EFFACER L'ÉCRAN :
	ctrl+L ...
• exécuter une commande du shell :
	.shell <commande>


♦(sqlite ?) formatage de la sortie de la commande SELECT :
 	.mode html|list|csv|column

 	.mode list ← .separator xxx (par ex : «\t» ou «~» ...)
	.mode column ← .width [x1 x2 x3 ...] (largueur de chaque colonne possible ...)

♦(sqlite ?) affichage des noms de colonnes :
 	.headers [on|off]

♦(sqlite ?) redirection de la sortie vers un fichier :
 	.output <nomFichier>
 puis
	.output stdout
		pour rétablir sortie vers l'écran ...

• table cotennant des champs ;
 enregistrements classés par «clés» (l'«id» est souvent la «clé primaire») ;
 chaque ligne est un «tuple» ou un «enregistrement» ;

• SQL / NoSQL :
_ SQL : pour données structurées. Les clés des enregistrements relient les
 différentes tables entre elles ; pas de redondance des données.
_ NoSQL : pour données brutes – plus performant en lecture pour de gros volumes
 de données, mais plus lent en écriture et en recherches sur les champs
 "secondaires" → on y créée souvent plusieurs tables pour faciliter les
 diférentes recherches.



● CLÉ PRIMAIRE, CLÉ SECONDAIRE, CLÉ ÉTRANGÈRE :
• clé primaire :
	PRI
Le champs (ou la combinaison de champs – clef composite) permettant de
 référencer de manière non-ambigüe l'enregistrement
• clé secondaire :
	SEC
Une clé référençant un autre enregistrement de la même table
• clé étrangère :
  MUL pour «MULtiple», car plusieurs occurences d'une même valeur sont permises
Une clé référençant un enregistrement d'une autre table


● INDEX :
Ressources, comme les tables.
• « index couvrant » :
    index couvrant 2 colonnes ou plus.

CREATE INDEX ix_... ON table(colonne)
    


●(MySQL) par défaut, les chaînes ne sont PAS stockées en UTF8 :
il faut indiquer l'encodage à la création d'une table :
(et facultativement l'ordre de tri à utiliser)
    CREATE TABLE tbl CHARACTER SET 'utf8' [| COLLATE ordreDeTi ] (...)

● ENCODAGE DE CARACTÈRES («CHARACTER SET») ET ORDRE DE TRI («COLLATE») :
  SHOW CHARACTER SET [LIKE 'utf%' ];
  SHOW COLLATION [LIKE ...];

• encodage et ordre de tri utilisés par une BdD :
   SELECT @@character_set_database, @@collation_database;

• modifier l'encodage d'une BdD ou d'une table :
	ALTER [TABLE|DATABASE] <id> CHARACTER SET utf8mb4
	  COLLATE utf8mb4_general_ci;



● VUE :
    CREATE VIEW nom AS SELECT ...
    
Table virtuelle (et dynamique) en L/E. 
Affiche, par exemple, le résultat d'une requête. Les changements réalisés dans
 la vue sont bien sûr appliqués aux tables sous-jacentes !
_ on peut lui appliquer des droits via GRANT et REVOKE
    → très utilisé pour gérer la sécurité à une granularité inférieure
        à celle de la table.

• VUES ≠ TABLE TEMPORAIRE :
_VUE :
    stockée ds la BdD, synchronisée avec les tables sous-jacentes.
_TABLE TEMPORAIRE :
    table indépendante, stockée en mémoire le temps de la session ...

● TABLE TEMPORAIRE :
•(MySQL) :
    CREATE TEMPORARY TABLE tbl AS ( SELECT .... )
ou
    CREATE TEMPORARY TABLE tbl( ... )
•(SQLserver):
avec SQLserver, les tables temporaires sont préfixées d'un dièse #
    CREATE #tbl ...
ou
    SELECT ... INTO #tbl FROM ...


● CONSTRAINT :
_ Convention de nommage : ck_xxxx.
_ se placent après les champs.
• PAR CONVENTION, une contrainte par colonne.

UNIQUE(champs)
CHECK(condition)    → PAS IMPLÉMENTÉ PAR MYSQL !

    CREATE TABLE Test(
        userName varchar,
        count smallint,
        CONSTRAINT  ck_ref FOREIGN KEY(userName) REFERENCES tableUser(name),
        CONSTRAINT ck_null CHECK(champs IS NOT NULL),
        CONSTRAINT ck_champ2_sup_champ0 CHECK(champ2 >= champ0 ),
    )


● ALIAS :
    tbl AS t
s'écrit aussi
    tbl t


● Texte comportant un mot-clef, ou des opérateurs, des caractères blanc,
 ponctuation, accents, ... :
• encadré par des apostrophes 'xxx' : c'est une chaîne litérale.
	une apostrophe au sein de la chaîne sera doublée :
		l'a	→	'l''a'
• encadré par des guillemets "xxx" : c'est un identifiant.
	de même, un guillemet dans la chaîne sera doublé.
		a"b"	→	"a""b"""

•(SQLite, µsoft – NON STANDARD) par des crochets [xxx] : identifiant.
•(SQLite, MySQL – NON STANDARD) par des accents graves `xxx` : identifiant.
Sous MySQL, cette technique ↑ est nécessaire pour tout caractère non ASCII.

• (MySQL) limitations sur longueur et casse des identifiants :
_ La plupart des identifiants sont limités à 64 caractères (sauf alias,
 qui sont la plupart du temps à 256 cars).

_Chaque BdD est un sous-répertoire du dossier de travail MySQL
 (/var/lib/mysql par défaut), et chaque table correspond à au moins
 un fichier ...
→ en fonction des systèmes de fichier, les noms de tables et de BdD
 seront ou non sensibles à la casse.

_ noms de colonnes, fonctions stockées, noms d'événements sont
 insensibles à la casse.


● « SELECT LAST_INSERT_ID() » :
Renvoit le 1er id en auto-incrément de la dernière requête INSERT ou UPDATE ...
Unique par connection → pas de problème de concurrence lors d'accès parallèles !



● COUNT([*|ALL|(DISTINCT)?expressionRenvoyantUneColonne]) :
  * :			les lignes,
  ALL :			ttes les valeurs (par défaut)
  expr :		une colonne ou qqch chose assimilable
  DISTINCT expr : les valeurs uniques de l'expression
• les FONCTIONS D'AGRÉGATION COUNT(), SUM(), AVG(), ...
 peuvent fonctionner avec un « GROUP BY »


● GROUP BY, ORDER BY sont cumulables :
p.ex	SELECT region, ville, COUNT(*) AS nbEleves FROM écoles
		GROUP BY region
		GROUP BY ville
		HAVING nbEleves > 10
		ORDER BY region ASC
		ORDER BY ville ASC;
• GROUP BY ... WITH ROLLUP :
    WITH ROLLUP introduit des sous-totaux


● SOUS-REQUÊTES : requête entre parenthèses !
Utilisables dans les clauses SELECT, FROM, WHERE.

• sous-requêtes SIMPLES :
    La sous-requête peut être exécutée seule. Elle sera exécutée avant la
requête principale, puis ses résultats y seront utilisés.
• ou CORRÉLÉES, SYNCHRONES :
    La sous-requête fait référence à des colonnes/tables de la requête
principale. Comme elle y est liée, le moteur SGBD va considérer les 2 requêtes
comme un tout et OPTIMISER l'accès en BdD.
 

p. ex :
	SELECT nom FROM gens WHERE adresse IN ( SELECT nom FROM villes
		WHERE population > 5000 );
ou
	SELECT nom FROM àCopier WHERE 1 = ALL(
		SELECT name FROM from pragma_table_info('àCopier')
			WHERE type="INTEGER" AND NOT name="typeCopie" );
→ renvoit les noms des enregistrements dont toutes les colonnes de type
 "ENTIER" (sauf typeCopie) valent 1.

•(sqlite) sqlite n'a pas de ALL() !



♦ EXPRESSIONS RATIONNELLES dans le paramètre de «LIKE» :
** INSENSIBLE À LA CASSE **
les expressions rationnelles s'écrivent entre guillements simples «'».
	   % remplace *,
	et _ remplace ?

♦ SELECT sert aussi à afficher du texte brut.

• SELECT expression AS nouveauNom ...
    SELECT tbl.nom, t2.nom 

● clauses notables :
	ORDER BY "xxx" [ASC|DESC]	← «ascendant»/«descendant»
• pas plus de 𝑛 entrées renvoyées :
	MySQL :     LIMIT 𝑛
	Oracle :    WHERE ROWID < 𝑛
	SQLserver : SELECT TOP 𝑛 ...


● WHERE :
	BETWEEN ... AND ...
	IN ( ..., ..., ..., ... )
	LIKE
	=, <>, =>, <=, >, <
    AND, OR, NOT,
    ... IS NULL / IS NOT NULL,
    ...
• WHERE EXISTS (requête)
    EXISTS(...) est vrai quand la sous-requête ne renvoit pas NULL 



● DISTINCT :
	SELECT DISTINCT(xxx) FROM yyy;


● JOKERS :
	%	→ équivalent *
	_	→ équivalent ?


● JOINTURE :
• jointure par défaut :
	SELECT * FROM élèves, écoles (...)
est équivalent à
	SELECT * FROM élèves JOIN écoles (...)
• JOIN tout seul → « INNER JOIN »


• clause ON :
 pour ne pas mettre la condition d'égalité de deux clés dans la clause WHERE.
• clause USING( xxx ) :
Quand le nom de colonne est le même dans les 2 tables, on peut s'en
 servir de raccourci pour
	ON ( tbl1.xxx = tbl2.xxx )

•  SELECT h.prenom, h.nom,  s.nom,  r.date_et_heure, r.duree
	FROM reservations AS r
	JOIN salles AS s ON r.id_classe = s.id
	JOIN humains AS h ON h.id = r.id_reservant;

	SELECT * FROM élèves JOIN écoles ON élèves.id_école = écoles.id
	  WHERE école.nom = 'Bordeaux';
• elles sont imbricables :
récupère les noms d'élèves apprenant le PHP,
 au sein d'une BdD contenant les tables éleve → école → language :
 	SELECT nom FROM élèves
		JOIN école ON élève.id_école = école.id
			JOIN language ON école.id_lang = language.id
				WHERE language.nom = 'PHP';

• différents types :
_ [INNER|] JOIN	→ retourne les enregistrements pour lesquels la condition
    du ON est remplie dans les 2 tables droite et gauche
_ JOIN →	affiche aussi les enreg de la table de gauche ne remplissant
    pas la cond°
_ RIGHT JOIN → affiche aussi les enreg de la tbl de droite ne remplissant pas ...
_ CROSS JOIN se comporte comme un INNER quand on lui ajoute une condition.
_ SELF JOIN :
    se fait en donnant deux alias différents à la même table au sein du FROM :
        « FROM tbl t1, tbl t2 »
_ THETA JOIN

● OPÉRATEURS D'ENSEMBLE :
• UNION :
	union de 2 requêtes, sans doublons.
• UNION ALL :
	on laisse les doublons.
• UNION peut aussi créer une ensemble, qui sera traité comme une table
    – pratique quand on a les droits de créer une table (même temporaire) 

• INTERSECT,
  MINUS



● FONCTIONS :
_ ROUND(𝑛), ROUND(𝑛, nb)
_ ISNULL(ₙ) renvoit 𝑛, ou 0 si le nombre 𝑛 est null
    → ( salaire + isnull(prime) ) renvoit tjr un nombre même si «prime» est null
_ COALESCE(v1, v2, ...)
    renvoit le premier v𝑛 non null
_ length()
_ replace()
_ substring(ch, i, nb) ← index **à partir de 1**
_ left(ch, 1)          ← substr() depuis la gauche
_ 
_ concat(ch1, ch2)

_ PARSE(ch, typeDest)
  TRY_PARSE(ch, typeDest) → ne génère pas d'erreur mais un NULL si le parse échoue   


• fonctions mathématiques :
	COS(), EXP(), LOG(), PI(), ...
• fonctions de géolocalisation,
• de date :
	NOW()	→  horodatage actuel,
	    DATE( NOW() ) → date actuelle
	    YEAR( NOW() ) → une année sous forme de nombre 
	YEAR(),
	MONTH(),
	DATEDIFF() → différence entre 2 dates,
	
• FONCTIONS D'AGGRÉGATION :
	COUNT(), SUM(), MAX(), MIN(), AVG(), ...
• HAVING :
    s'utilise avec les fonctions d'aggrégations comme le WHERE.
     

● FONCTIONS DE TRAITEMENT DE TEXTE :
	replace(ch,de,vers)
	ltrim(ch, àsuppr), rtrim(ch, àsuppr),
		ou [lr]trim(ch) qui s'occupe des blancs
	repeat(ch,nb)
	substring(ch,pos,nb), substring(ch,pos), ...
	upper(ch), lower(ch),
	...


● TIMESTAMP VERS DATETIME OU DATE :
    SELECT leTimestamp, 
           FROM_UNIXTIME(leTimestamp) as val_datetime,
           CAST(FROM_UNIXTIME(leTimestamp) as date) as val_date
        FROM table




● GROUP_CONCAT( tbl.champs [| SEPARATOR ch ] ) :
concaténe les lignes correspondant au champs donné,
    optionnellement séparées par une chaîne.


●(sqlite) « pragma table_info(tbl) » :
	renvoit une table listant les colonnes de «tbl» et leurs attributs :
		cid	/ name / type / notnull / dflt_value / pk

●(sqlite) compter le nb de colonnes d'une table:
	SELECT COUNT(*) FROM pragma_table_info("nomTable");
Le nom de la table doit être encadré de guillemets (simples ou doubles),
 car pragma_table_info() est une f°.


●SQLite understands the following binary operat	ors,
 in order from highest to lowest precedence:
 [sans oublier les parenthèses ...] ( xxx )
    || (CONCATÉNATION de chaines !)
    *    /    % (modulo)
    +    -
    <<   >>   &    |
    <    <=   >    >=
    =    ==   !=   <>   IS   IS NOT   IN   LIKE   GLOB   MATCH   REGEXP
    AND
    OR
Supported unary prefix operators are these:
    -    +    ~    NOT



♦des exemples que j'ai utilisés :
« SELECT filename, entry_title, releaseDateObj FROM item
	WHERE filename LIKE '%ITEMA%' AND feed_id = 7958 ORDER BY filename; »
« select entry_title from item where feed_id = (select ufeed_id from rss_feed_impl
	where title = 'Sur les épaules de Darwin'); »


●(MySQL, SQLserver, Oracle) TRANSACTIONS AUTOMATIQUES :
_ MySQL, SQLserver :
Autocommit par défaut.
    → « SET AUTOCOMMIT = 0 » avant toute transaction !
_ Oracle :
« uncommited » par défaut.
    → après tout UPDATE,INSERT,DELETE, il faut un COMMIT !

•(MySQL) :
    SET SQL_SAFE_COMMIT = 0;
permet d'utiliser des DELETE au sein d'une transaction sans clef dans le WHERE.


●(MySQL) TRANSACTIONS :
    SET AUTOCOMMIT = 0;
    SET SQL_SAFE_UPDATES = 0;
    START TRANSACTION;
	    DELETE FROM COMMERCIAUX WHERE COMMISSION > 5000;
        ROLLBACK;
    END TRANSACTION;


● TYPES DE DONNÉES :
INTEGER/INT   4oct
SMALLINT      16b
BIGINT        8oct
(N)CHAR
(N)VARCHAR


● MÉTADONNÉES :
• le « dictionnaire » des données.
    SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE COLUMN_DEFAULT
        FROM IN
        SCHEMA.COLUMNS
        WHERE


● CRÉATION / SUPPRESSION D'UNE TABLE EN MySQL :
  CREATE TABLE <MA_ION
	id INT PRIMARY KEY AUTO_INCREMENT,
			→ clé primaire numérique : plus rapide pour les recherches
	nom VARCHAR(tMax),
	date DATE,			→ au format AAAA/MM/JJ
	info	TEXT		→ texte de taille arbitraire
  );

La taille des champs doit être bien pensée – les champs consomment de la place.

  DROP TABLE <table>;
  DROP DATABASE <Bdd>;

● COMMANDES ADMINISTRATIVES :
  CREATE USER [IF NOT EXIST] <user> IDENTIFIED BY 'MdP'...
	→ il y a de nbx options pour spécifier les droits, la fréquence de renouvellement du MdP, ...
	 Penser à NE JAMAIS UTILISER «root» en tant qu'utilisateur !
  DROP USER;
  SET PASSWORD [FOR <user>] = PASSWORD('MdP');

  SHOW GRANTS [FOR CURRENT_USER];

• octroi de droits aux utilisateurs :
  GRANT ...		→ gestion des droits d'accès
				→ aussi pour lister les utilisateurs.
	GRANT SELECT, UPDATE ON [ <BdD> | <BdD>.<tbl> ] TO <user@hôte>;

Les droits de création & suppression de table au sein d'une BdD sont alloués
 un-à-un :
 	GRANT CREATE ON <BdD>.* TO <user@hôte>;
	GRANT DROP ON <BdD>.* TO <user@hôte>;

• spécifier l'utilisateur :
	testeur@localhost
	'testeur'@'localhost';
	'user'@'192.13.25.45';
_ % : joker pour « toutes adresses IP » ;
	'user1'@'%';

  SHOW DATABASES;
  SHOW TABLES [ FROM <BdD> ];

  SHOW [FULL] COLUMNS FROM [<BdD>.]<table>;
	→ montre la structure logique de la table
  DESCRIBE <table>;			→ itou

  ALTER TABLE <table> [ ADD ... | DROP ... | MODIFY ... ];

    ALTER TABLE tbl  CHANGE COLUMN col col DECIMAL(8,2);
est équivalent à
    ALTER TABLE tbl  MODIFY col DECIMAL(8,2);


•(MySQL) EXPORTER UNE BdD :
	mysqldump -u <user> [-p|] --databases <BdD> > <fic.sql> #avec un «S»
•(MySQL) et l'importer :
	mysql -u <user> [-p|] --database <BdD> < <fic.sql>


● réinitialisation du MdP root :
_ arrêter le service
_ mysqld_safe --skip-grant-tables :
	redémarrer le démon en mode sûr, SANS charger la table de droits
	→ AUCUN contrôle d'accès !
_ use mysql;
  UPDATE user SET password = PASSWORD(MdP) WHERE user = 'root';
	↑ ceci ne tient pas compte du nom d'hôte ...
_ flush privileges;
_ redémarrer mysql en mode normal
