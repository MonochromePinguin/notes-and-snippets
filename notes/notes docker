- image docker == données stockées sur le disque
- conteneur == instance en  mémoire en cours d'exécution


● CONTENEURS :
• créer conteneur :
docker run --name xxx ...

• démarrer/arrêter conteneur :
docker start|stop <nomContainer>
		démarre/arrête un conteneur déjà existant

• renommer conteneur :
	docker rename <ancNom> <nouvNom>

•

• exécuter commande dans conteneur :
docker exec -ti <nomContainer> <nomCommande>
		exécute une commande en avant-plan

• informations sur conteneurs :
docker inspect <nomContainer>
	liste les infos sur un conteneur, notamment
		les Volumes partagés (« bind mounts ») sous l'arborescence «Volumes»:


● IMAGES :
• lister les images :
	docker image ls
	docker images (ancienne syntaxe < 1.13)

•nommer une image (lui attribuer un tag) :
_ Un tag est une référence vers une image,
_ chaque image peut en avoir en quantité indéfinie.
	docker tag <IDimage> [|dépôt/]<nomTag>[|:version]



• Un tag peut indiquer l'adresse du dépôt distant où pusher/puller l'image :
Utiliser le format
	[|URL_ou_adresse_dépôt[|:port]/]<nomImage>[|:version]

• push/pull d'images :
	docker push <tag>
	docker pull <tag>[|:version]

• supprimer une image :
	docker images rm <IDimage> ...

• renommer une image :
via un tag :
	docker tag <ancNom> <nouvNom>; docker rmi <ancNom>

• cloner un conteneur vers nouvelle image :
à partir d'un conteneur en cours d'exécution :
	docker commit -p  <IDconteneurf> <repoImage/nomImage>
-p	→	mettre en pause le conteneur
L'image créée aura un ID mais pas de «tag».
p.ex :
	docker commit -p cee9fce17e35 registry-private.docker.iscbordeaux.lan.bdx.sqli.com/oracleserver/entreprise




• privilégier l'image de la distro « Alpine », la plus minimaliste disponible

• les conteneurs docker sont sans-état / stateless :
→ dans le cas d'une BdD, if faut donc sauvegarder régulièrement l'image,
et reconstruire la BdD au lançement de l'image à partir de scripts SQL
 si le conteneur tombe ...


• exécuter une image avec des ports mappés :
	docker run -d -p <portHôte>:<portConteneur>
		-e <envVarExportée=valeur>
		<image> <commande>



● on peut en une commande télécharger (depuis le « hub » d'images)
 et exécuter une image ...
• ¿ quid de la configuration des MdP ?
	Elle est effectuée via des variables d'environnement !


● DOCKERFILES :
chaque instruction FROM ou RUN conduit à la création d'une image empilée sur les autres
	FROM node:alpine
	FROM img2
	FROM img3
	WORKDIR .
	COPY package*.json ./
	RUN npm install
	COPY . .
	EXPOSE 3000				← expose ce port au sein du réseau interne à docker
	cmd ["node", "app.js"]		← exécute ces 2 commandes

• principales commandes du docker file :
_ FROM
_ COPY <sourceHôte> <destinationDsConteneur>
_ EXPOSE <port à ouvrir sur le réseau interne à docker>
_ RUN <commande à exécuter au sein du conteneur>
_ WORKDIR <au sein du conteneur>
_ CMD <commande finale à exécuter au sein du conteneur>

• générer l'image :
docker image build <dockerfile>

• sauvegarder une image :
docker image save -o <archive.tar>

● configurer un ensemble de services :
 via un fichier « docker-compose.yml » accédé par docker-compose ...

qui liste en particulier les services à démarrer en conteneur, leurs noms d'ĥôte,
les ports réseau à ouvrir et mapper, ...



● systèmes spécialisés pour docker :
• images :
_ CoreOS (linux minimaliste)
_ snappy (spécialisés dans les paquets snaps d'ubuntu)
• OS dédiés à la gestion de fermes de conteneurs :
_ kubernetes
_ swarm (de docker)
