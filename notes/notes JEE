 Tomcat, glassfish ...

• serveur web :
	simple serveur gérant HTTP.
• serveur d'application :
  _serveur web + conteneur web (contexte d'exécution pour code php, java, ...).
  _ traitement logiciel déclenché par la requête.

→ « dans apache, il y a une partie serveur web (le contrôleur frontal), et une
partie serveur d'application »

→ Tomcat : serveur d'application :
apache + conteneur web java (qui contient moteur JSP & moteur servlets,
 et fournit les API nécessaires au déploiement d'un WAR)

● JEE :
 extension de java avec bibliothèques supplémentaire pour serveurs d'application.

● WAR :
structure prédéfinie :
	META-INF/						(privé)
		MANIFEST.MF
	WEB-INF/						(accessible depuis web, toutes ressources)
		web.xml
		jsp/
		    les *.jsp
		classes/
		    static/
		    templates/
		    application.properties
		lib/
			les *.jar


● WEB-INF :
	dossier contenant les fichiers accessibles au serveur java – PAS au monde extérieur.
• web.xml :
	configuration (routage URL/servlet ...) de l'app web.

• gérer la racine du site avec un servlet :
(ici, DTD pour servlet v2.5)
	<?xml version="1.0" encoding="ISO-8859-1"?>
	<!DOCTYPE web-app
	PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.5//EN"
	"http://java.sun.com/dtd/web-app_2_5.dtd">

	<web-app>
		<servlet>
			<servlet-name>homepageServlet</servlet-name>
			<servlet-class>org.monochrome.package.LaClasse</servlet-class>
		</servlet>

		<servlet-mapping>
			<servlet-name>homepageServlet</servlet-name>
			<url-pattern>/sonURL</url-pattern>
		</servlet-mapping>

		<!-- liste des fichiers servant de page d'accueil -->
		<welcome-file-list>
			<!-- → l'URL «/» est donc équivalente à « /sonURL » -->
			<welcome-file>sonURL</welcome-file>
			<welcome-file>index.html</welcome-file>
			<welcome-file>index.htm</welcome-file>
			<welcome-file>index.jsp</welcome-file>
		</welcome-file-list>
	</web-app>



● JEE utilise le modèle MVC :
	modèle :		java BEANS (objets java) fait le lien avec la BdD
	vue :			page JSP
	contrôleur :	servlet au sein du serveur d'applications


● un doGet() de servlet reçoit 2 objets en param :
Request, Response.

annotations Vs XML (TODO)

TODO: JSTL


● JSP – « Java Server Page » :
_ Technique permettant de créer dynamiquement du code HTML, XML ou autre,
_ et d'ajouter du code java dans un contenu statique via des balises XML (« actions JSP »).
_ compilées par un compilateur JSP pour devenir des servlets Java : JSP (→ java)? → bytecode.

• « taglib » : bibliothèque de balises JSP
• EL – « Expression Langage »


	<%@ include <fichier.jsp> %>
	<%@ taglib ... %>
		« Declares a tag library, containing custom actions, used in the page »
	<%-- commentaire --%>
	<% code; %>
	<%! déclaration de vars; %>
	<%= expression %>

• déconseillé d'utiliser des URI absolue :
→
    <%= request.getContextPath() %>


• FAIRE TRÈS ATTENTION À LA CORRESPONDANCE VERSION–URI :
  à partir de javax.servlets:jst 1.2, l'URI à indiquer dans la taglib
contient un «/jsp» après le nom de domaine !
    <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

• test :
    <c:if test="${not empty model.field}">
        ...
    </c:if>

• bloc case :
    <c:choose>
        <c:when test="${..}">
            ...
        </c:when>
        <c:when test="${..}">
            ...
        </c:when>
        <c:otherwise>
            ...
        </c:otherwise>
    </c:choose>

• boucle :
    <c:forEach items="${users}" var="u">
        <tr>
            <td>${u.name}</td>
            <td>${u.password}</td>
            <td>${u.activated}</td>
        </tr>
    </c:forEach>



● JSP ≥ 2.0 ACCEPTE LES EXPRESSIONS E.L.:
• une variable déclarée dans un bloc <%! ... %> n'est pas accessible dans EL !
→ la déclarer comme attribut via
	<c:set var="nom" scope="page|request|session|application" value="${expr}"/>


• accéder à un attribut dans une expression EL :
Dans ce code,
    ${ fn:escapeXml(requestScope.value) }
« requestScope.value » est l'équivalent de
    <%! String value = ""; %>
    <% value = request.getAttribute("value"); %>

• quelques objets implicites :
  header :	les entêtes de la requête HTTP
	${header["host"]}
  param :	les paramètres POST ou queryString de la requête.
	${param['org.config1']}
 mais aussi
  les attributs de telle ou telle portée
 (requestScope, sessionScope, servletScope, ...) :
	${sessionScope.productList.nb}
  les cookies :
	${cookie["nomCookie"]}
	



● JSF – « Java Server Faces » :
_ framework java pour le développement d'app web, basé s/ notion de composant.
_ peut utiliser JSP ou non.

• différence entre #{} et ${} :
_ ${} : expression immédiate calculée 1 fois.
_ #{} : « deferred expression » : accès en L/E à un bean ou appel de f° dépendant du cycle de vie de la page.


TODO !
la « face servlet » :
	le contrôleur frontal qui dispatche les requêtes vers les servlets
	Facelet : page XHTML (avec nouvelles balises HTML5)

• mise à jour d'un élément via ajax :
	<p:ajax
		listener="#{référence.de.la.callback}"
		update="idElement-à-updater idElement2-à-updater ..." />
par ex :	
		 
			<p:outputPanel styleClass="filters">
				<h:outputLabel for="monthfilter" value="Mois : " />
				<p:outputPanel styleClass="filterBlock">
					<p:selectOneMenu id="monthfilter"
						value="#{receiptFilesController.receiptFilesBean.monthFilterSelectedValue}"
						required="true" label="Mois">
						<p:ajax
							listener="#{receiptFilesController.onMonthChange}"
							update="receiptFilesAccordion :messages" />
						<f:selectItems
							value="#{receiptFilesController.receiptFilesBean.monthFilterValues.entrySet()}"
							var="monthentry" itemValue="#{monthentry.key}"
							itemLabel="#{monthentry.value}">
						</f:selectItems>
					</p:selectOneMenu>
				</p:outputPanel>

				<h:outputLabel for="statusfilter" value="Statut : " />
				<p:outputPanel styleClass="filterBlock">
					<p:selectOneMenu id="statusfilter"
						value="#{receiptFilesController.receiptFilesBean.statusFilterSelectedValue}"
						required="true" label="Statut">
						<p:ajax listener="#{receiptFilesController.onStatusFilterChange}"
							update="receiptFilesAccordion :messages originfilter" />
						<f:selectItems
							value="#{receiptFilesController.receiptFilesBean.statusFilterValues.entrySet()}"
							var="statusentry" itemValue="#{statusentry.key}"
							itemLabel="#{statusentry.value}">
						</f:selectItems>
					</p:selectOneMenu>
				</p:outputPanel>



● JPA :
    VOIR LE § CORRESPONDANT DANS « notes hibernate »



● (INTELLIJ) BIBLIOTHÈQUES À IMPORTER POUR UN PROJET JEE/JSF :
javax.faces-api-2.3.jar (annotations javax.faces.bean.ManagedBean et autres)
jsf-api.jar
jsf-impl.jar
jstl-1.1.0.jar			(JSTL)
primefaces-6.1.jar		(import des annotations dans le XHTML)
primefaces-6.1-sources.jar
