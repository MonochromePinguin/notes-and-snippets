● une 20aine de frameworks java regroupés.

ce(s) framework(s) permettent de gérer parallélisme, load-balancing, ...

• histoire :
_ 2002 : Rd Johnson publie « Expert One-on-One J2EE Desing & Development », contenant
du code et un diagramme de classe ...
_ 2004 : ... devenu String 1.0


• contraintes métier,
• contraintes techniques :
	parallélisme,
	temps de réponse (systèmes temps-réel),
	haute disponibilité
		→ on peut p.ex utiliser la réplication : 𝑛 instances en load-balancing.
• contraintes pratiques :
	_ évolutivité,
	_ maintenabilité,
	_ O de SOLID (possibilité d'insérer des greffons)
	_ portabilité (parfois),
	_ interopérabilité :

● RMI : « Remote Method Invocation » :
	API java pour le RPC au sein d'une architecture répartie en JAVA.
	registre central/ annuaire,

● fichier .wsdl (Web Service Description Language, dérivé du XML),
	échanges via SOAP

● Spring :
_ framework basé sur l'IOD.
_ un .xml ou des annotations indiquent les classes à instancier pour injection.
_ architecture AOP – « Aspect Oriented Programming »



● PLUSIEURS APPROCHES POUR L'INJECTION DE DÉPENDANCES :
_ injection via un setter, convention java beans
_ via le constructeur, comme sous symfony
• injection directe dans la propriété *privée* par spring, via définition
dans la config .xml ( <property name="champ" value="val"/> )
_ Cette méthode est utilisable pour toute propriété, de type simple ou non :
	int, String, List, Set, Map, mais aussi fichier ...
	<bean id="testBean" class="com.monochrome.test">
		<property name="list">
			<list>
				<value>....</value>
				<value>....</value>
			</list>
		</property>
		<property name="intProp" value="43"/>
		<property name="injectedVariable" value=${name.space.of.value} />
	</bean>
_ les « inner beans » : beans injectés dans un bean :
	...
		<property name="innerBean">
			<bean id="..." class="...">
				...
			</bean>
		</property>
	...

• org.spring.applicationContext : conteneur de l'application, responsable de l'injection.



● BEANS :
_ trouvés par XML, injection, ou code java
_ annotés @Component
	ou @Component("autreNom")


● PORTÉES DES BEAN ( @scope(<portées>) ) :
• singleton (par défaut) :
	1 seule instance par ApplicationContext
• prototype :
	nouvelle instance à chaque requête de Bean

(↓ portées spécifiques aux app' web : )
• request(proxyMode = ScopedProxyMode.TARGET_CLASS) :
	une instance pour chaque requête HTTP.
	Le paramètre «proxyMode» serait nécessaire ???????
• session(proxyMode = ScopedProxyMode.TARGET_CLASS) :
	... chaque session de client HTTP
• application :
	la durée de vie de la servlet
• webSocket :
	...
• flow :
	la durée de vie d'un «flow» – un programme s'exécutant pour le compte d'un
	client HTTP : ???? session ? requête ?



● PROXYS DE BEAN :
C'est de l'AOP – « Aspect Oriented Programming »
	Pour injecter un bean dans un autre de portée différente (p.ex un bean
de portée «request» injecté dans un bean de portée «singleton»),
 et garder l'intégrité de référence, on injecte un proxy :
→ configuration spéciale du bean :
• en XML :
	<bean id="unId" class="com.monochrome.Class" scope="session">
		<aop:scoped-proxy>
	</bean>
• annotation :
	???????????


● CYCLE DE VIE D'UN BEAN :
Ne pas utiliser le constructeur, qui est appelé avant l'hydratation du bean ..
• propriétés XML :
	<bean id="leBean" init-method = "initFonc" destroy-method="destroyFonc">
	</bean>
• annotations (officiellement recommandé !) :
	????
	@Pre-destroy
• implémentation d'interface :
	????


● ANNOTATIONS NOTABLES :
@Repository → ,
@Service,
@Controller

• méthode à enrober dans un try{}catch(){} / BEGIN TRANSACTION/COMMIT :
    @Transactional


● SECTIONS CRITIQUES :
_ @Transactional :
	cette annotation sur une méthode permet l'exclusion mutuelle entre threads



● DÉMARRAGE DE SPRING :
Par défaut, à moins qu'on ai spécifié une autre classe de démarrage dans
le web.xml, spring cherche à démarrer la servlet « DispatcherServlet » :
→ spring recherche dans WEB-INF/ le fichier de configuration 
    « DispatcherServlet-servlet.xml »

• changer la servlet par défaut de spring – dans web.xml :
Dans la déclaration de servlet
    <servlet>
        ...
        <load-on-startup>1</load-on-startup>
    </servlet>
    
    
    
● SPRING BOOT : 
• config centralisée dans resources/applications.properties :
	spring.datasource.url = jdbc:mysql://localhost:3306/studentProject
	spring.datasource.username = javaStudent
	spring.datasource.password = Turlututu!
	# Keep the connection alive if idle for a long time (needed in production)
	#spring.datasource.testWhileIdle = true
	#spring.datasource.validationQuery = SELECT 1
	spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

• classe principale :
	@SpringBootApplication
	//définit le ou les packages where @Components should be loaded from
	@ComponentScan(basePackages = "org.monochrome.servlets") 
	public class Main {

		public static void main(String[] args) {
			SpringApplication.run(Main.class, args);
		}
	}

• dans org.monochrome.servlets :
	@RestController, @Controller
• pour les entités :
	@Entity
	@Table(name="...")
ainsi que
	@Column(name="", nullable="", ...)	
	

conteneur à micro-services.
Chaque micro-service est fourni par une servlet
 de cycle de vie indépendant des autre.
_ ConfigurationService :
    centralise toutes les configurations, globales et spécifiques à chaque service.
_ RegistryService :
    sert de dispatcher entre les microservices.
_ JMS « Java Messaging Service » :
    bus de comm' entre microservices.
    
•

