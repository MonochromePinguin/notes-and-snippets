┌───────┐
│● Rhino│ possède un débogueur intégré :
└───────┘
•	java -jar rhino.jar
•	java org.mozilla.javascript.tools.debugger.Main \
				[options] [filename.js] [script-arguments]



● où placer la balise <script> dans un fichier HTML ?
•La méthode moderne est de la placer ds l'élément <head> avec une propriétés :
• async :
_ script exécuté dès son chargement dans un ordre quelconque, ne bloquant pas
 le traitement du HTML
_ réservé aux scripts externes
• defer :
script chargé en //e,
_ exécutés dans l'ordre d'apparition, APRÈS le chargement du document,
	mais AVANT l'éven DOMContentLoaded
→ il faut utiliser « document.addEventListener('DOMContentLoaded', f°, ...) » !

• attention à la combinaison async + addEventListener('DOMContentLoaded') :
l'évenement attendu peut être lancé AVANT l'appel à addEventListener(), et
dans ce cas la cb ne sera jamais exécutée.
→ si document.readyState != 'loading', il est trop tard, exécuter la cb manuellement.
Il **semble** que «document.readyState» ne change pas pendant l'exécution de JS :
_ JS est **monothread**,
_ les références des callbacks & blocs de code à exécuter sont enlistées dans
 une queue, et chaque code code est exécuté séquentiellement.
¿ MAIS EST-CE QUE ÇA S'APPLIQUE AUSSI À document.readystate ?

● exécuter du code à la fréquence de rafraichissement de l'écran :
  requestAnimationFrame(cbRappel) : peut recevoir une valeur max,
 et doit être appelé pour chaque trame – par ex en fin de f° de MàJ.
 	La cb recoit en param un horodatage epoch ;
  window.performance.now() permet d'obtenir un 1er horodatage de référence.

•à comparer avec window.setTimeOUt().


● objet Window :
l'objet global au sein d'un onglet de navigateur (MAIS « global » sous node).
• Window : la fenêtre (ou l'onglet)
• Window.document : le DOM y étant contenu.
• document.defaultView : la Window contenant le DOM.



● insérer plusieurs nœuds en une seule fois (pour éviter les réarrangements
à chaque insertions) :
	frag = new DocumentFragment();
insérer les nœuds dans «frag» via frag.appendChild(), puis l'insérer dans
 le futur parent des nœuds.
• insertion d'éléments :
	préférer insertAdjacentHTML() à .innerHTML (ne modifie pas les éventuels
 éléments déjà présents dans le conteneur),
	voire un DOMParser.
• document.createTextNode(<chaîne>) ...


● supprimer des éléments d'une HTMLElementCollection :
getElementsByClassName(), getElementsByTagName(), elem.children, ...
sont de type HTMLCollection :
une collection « live », dont les manipulations se reflètent dans le DOM.
→ NE PAS SUPPRIMER DES ÉLEMENTS DEPUIS LE DÉBUT DE LA LISTE !
Plutôt supprimer à partir du dernier (utiliser liste.length).


● armer la position d'un élément :
	elem.offsetLeft = 𝑛
	elem.offsetTop = 𝑛
et non elem.style.{top,left} = 𝑛 !



● PROPRIÉTÉS ET MÉTHODES REMARQUABLES :
elem.getBoundingClientRect(),
elem.offsetLeft, elem.offsetTop,

elem.id,
form.action,
...

•elem.classList :
	elem.classList.add()/remove()
	elem.classList.toggle(anc,nouv)
				  .contains()
				  .replace()

•elem.setAttribute(),
•elem.style.removeProperty()/setProperty(), ...


• window.innerHeight
		.innerWidth
• window.prompt(texte, valeurRéponseParDéfaut)
		.scrollTo(x,y)
		.scrollBy(Δx, Δy)
• window.open( URL [, '_blank'|'_parent'|'_self'|'_top'|NOMFEN] [, options] )


•évenements souris :
ev.button	→ 0 = bouton principal, 1 = molette/milieu, 2 = b. droit,
				3 et 4 = précédent / suivant

• :
document.getElementById(),
		.getElementsByClassName(),
		.getElementsByName(),	→ tt éléments d'attribut "name" donné
		.getElementsByTagName(),
		.querySelector(),		→ 1er élém rencontré
		.querySelectorAll(),	→ TOUT les éléments

document.getElementsByTagName('main')[0].children


● listes notables du DOM :
document.forms[]
formElem.elements[]
elem.classList[]
elem.chilNodes[]

● element :
elem.children[],
	.firstChild,
	.lastChild

• elem.children[] ≠ elem.childNodes[] !
.childNodes :
	propriété d'un nœud du DOM – «Node». Contient tout les nœuds fils
 ( TextNode, éléments, commentaires, ...).
.children :
	propriété d'un élément – «Element». Contient uniquement les éléments fils.

• elem.setAttribute() ≠ elem.style.setProperty() !

elem.closest('sélecteur') – renvoit l'élément, un parent, ou null

elem.getAttributes()
	.appendChild()
	.prependChild()
	.removeChild()
etc.


● ATTRIBUTS DE DONNÉES :
définits comme les autres attributs HTML
– Leurs noms démarrent par «data-»
– accessibles par :
	element.getAttribute(data-xxxx)
	element.dataset.xxx


● VARIABLES CSS :
_ Si armée via elem.style.setProperty(),
 récupérables via elem.style.getProperty()
• via getComputedStyle :
	getComputedStyle(elem,null).getPropertyValue('--var');


● AJOUTER/SUPPRIMER UN SÉLECTEUR CSS :
	var css = document.createElement("style");
	css.type = "text/css";
	css.innerHTML = "strong { color: red }";
	document.body.appendChild(css);
• ou, si on est sûr d'avoir une feuille de style :
	var sheet = window.document.styleSheets[0];
	sheet.insertRule('strong { color: red; }', sheet.cssRules.length);

• récupérer une règle CSS :
Cette fonction part du postulat qu'il y a UNE feuille de style (styleSheets[0]).
_ Parcourir «document.styleSheets[𝑛].cssRules»,
_  tester la prop «selectorText»
→ renvoit une «CSSStyleRule»
    function getStyle(selector)
    {
        const rules = document.styleSheets[0].cssRules;
        const l = rules.length;

        for (let i = 0; i < l; ++i) {
            if (rules[i].selectorText == selector) {
                return rules[i];
            }
        }
        return null;
    }

• modifier une «CSSStyleRule» :
ex :
	CSSStyleRule.style.display = 'none';
etc.


● en HTML < 5, Il fallait :
• Insérer <meta http-equiv="Content-Script-Type" content="text/javascript" />
dans l'entête pour éviter d'indiquer le type de script à chaque déclaration
 d'action, comme dans
	<body onload="javascript: document.forms[0].texte.focus(); testAccesG;">
ou dans
	<script language="javascript">


● elem.addEventListener(ev, callback ) / ev.preventDefault() / ev.stopPropagation() :
• ev.preventDefault() :
	Bloque l'action par défaut du navigateur, mais pas le bullage de l'éven.
• ev.stopPropagation():
	Bloque le bullage – seul l'élément courant effectue des actions en retour,
 pas les éléments parents.
• renvoyer TRUE/FALSE :
	SANS EFFET EN JAVASCRIPT PUR.
	Équivalent ev.preventDefault() + ev.stopPropagation() sous JQuery.



● LA VALEUR DE RETOUR D'UN GESTIONNAIRE D'ÉVÉNEMENT joue un rôle :
•Si le gestionnaire renvoit «FAUX» l'action par défaut n'est pas exécutée
•s'il renvoit «VRAI» (ou ne renvoit rien), 
	l'action par défaut sera exécuté ensuite !

• <form action="[URL|javascript:fonc()]"> ou form.onsubmit="" :
	de même que ↑, la f° doit renvoyer un booléen indiquant s'il faut ou non
 envoyer le formulaire (à l'addresse spécifiée, par la méthode indiquée ...)


● PORTÉE DE « THIS » :
• dans une simple fonction :
	la portée globale (l'objet window au sein d'un navigateur)
• dans une méthode :
	l'objet conteneur.
	-> Mais ce n'est PAS le cas pour une fonction dans une méthode !
• dans une fonction fléchée :
	le contexte dans lequel elle est déclarée
• APPELER UNE FONCTION DANS UN CONTEXTE BIEN DÉFINI :
	var agent = {
		name: 'bla';
		action: function(callback) {
			callback.call(this);
		}
	}

	// cette fonction est dans le contexte de « Window »
	function do() {
		console.log( ... + this.name );
	}
	agent.action(do);

-> la callback sera appelée par « .call() » dans le contexte de l'objet.

• fonc.call(this, arg1, arg2, arg3, ...)        -> liste d'arguments
  fonc.apply(this, [arg1, arg2, arg3, ...] )    -> un tableau d'arguments



● ATTENTIONS AUX PORTÉES quand on arme un gestionnaire d'évènement ds une bcl !
	for ( x = 0;  x < l;  x++ )
	{
		elem.onclick = function() { fonc(x) }
	}
→ «fonc» est liée à la portée du bloc "for..." – donc TOUTES les instances
liées à onclick verront le MÊME x – et sa dernière valeur stockée, celle de l !
→ utiliser une closure :
remplacer le corps de la boucle par un appel de fonction, tel que :
	for (x = 0;  x < l;  x++ )
		modifieOnclick( elem, x );


● AJAX :
	via l'objet XMLHttpRequest
→ simple requête GET, POST, ... dirigée vers le serveur,
  qui renvoit une réponse (en HTML, XML, JSON, ...)
→ requête asynchrone

JSON.stringify(obj) → chaîne JSON. les propriétés indéfinies sont écartées.
JSON.parse(ch)      → objet



● afficher le contenu d'un objet via console.log() :
utiliser des virgules pour SÉPARER LES PARAMÈTRES
 → le navigateur affichera l'objet de manière détaillée.
	console.log("texte", obj)


---------------------------------- PUR JAVASCRIPT -----------------------------

● (ES6) PATRON DE CHAÎNE avec le guillemet inverse.
pour générer une chaîne incluant des variables :
	v1 = 'chat';
	v2 = 'mammifère';
	res = `le ${v1} est un ${v2}`;


● conversion implicite en nombre via le préfixe « + » :
val = +'1234'
val = +'blabla' →    NaN !



● BOUCLES «FOR OF» (VALEURS) ET «FOR IN» (INDEXES) :
• VALEUR – « for ( v of tbl )» :
	parcourt les valeurs ; i reçoit une copie de la valeur
• INDICES – « for ( p in obj )» :
	parcourt les propriétés, (donc les indices pour un tableau)
	→ on accède à la valeur via « obj[p] » ...

• tbl.forEach( (val [, index [, array]] ) => ... )


● pour toutes les boucles «for» :
préférer for (const ...) à for( let ... ) quand on ne modifie pas le compteur !



● HOISTING :
_ «var» est sujet au hoisting,
_ PAS «let» et «const».


• préfixes numériques :
  0x...     hexa
  0b...     binaire
  0o...     octal


● TYPES DE BASE :
	Undefined
	Null
	Boolean
	Number
	String
	Object
	Symbol (depuis ES6)

• falsy :
	undefined
	null
	false
	0
	chaîne vide ''
	tableau vide [], objet vide {} SAUF SI CONVERSION EN BOOLÉEN
	NaN

• truthy :
	tout le reste ! chaînes, tableaux et objets ayant contenu ...

• le cas particulier des tableaux vides :
	let tbl = [];
	( tbl == false ) -> true
	Boolean(tbl)     -> true
Un tableau vide est falsy par défaut,
 SAUF en cas de conversion explicite par « Boolean(tbl) »
 ou par la négation « !tbl »


●  typeof() et instanceof ... :
	if ( typeof(obj) == 'String' )
		...
	if ( obj instanceof MonObjet )
		...


• pr savoir si un objet X possède la propriété Y :
« if ( Y in X ) »
  ...
≠ « if ( X.hasOwnProperty(Y) ) »,
 qui teste si Y est une propriété personnelle de X == PAS une propriété
 héritée du prototype.
≠ « if ( X.Y ) »
 qui teste si la propriété est VRAIE, NON-NULLE, ... → renvoit «FAUX»
 s'il s'agit d'une chaîne vide ("") !

• propriété personnelle d'un objet → propriété héritée par ses descendants,
 de valeur partagée par tte les instances des descendants,
 sauf si une de ces instances arme la valeur de cette propriété
 → nouvelle propriété personnelle de même nom !

• les opérateurs ===, !== ne sont pas ==, !=   !

• raccourci pour assigner une valeur par défaut :
	var = val || defaultVal;



MÉTHODES ET FONCTIONS NOTABLES DES OBJETS :
•supprimer une propriété :
	delete( obj.prop )
• avant stringification, on peut aussi utiliser
	obj.prop = undefined
car les propriétés indéfinies ne sont pas converties ...

« obj.prop = f° fléchée » est possible ...



● MÉTHODES NOTABLES DES TABLEAUX :
• la seule différence visible entre un tableau et un autre type d'objet, c'est
		.length

tbl.map( v => f(v) )
	→ tableau de même taille
tbl.filter( v => testBooléen )
	→ tableau ne contenant que les valeurs répondant au critère
tbl.reduce( (accum, v) => accum + v, v0DeAccum )
	→ opération cyclique sur toutes les entrées du tableau

_ fin du tableau :
	tbl.push()
	tbl.pop()



● FONCTION VARIADIQUE (avec un nombre variable d'arguments) :
Comme on peut appeler une f° avec un nombre indéfini de paramètres, on peut
 utiliser l'objet «arguments» :
	fonc() {
		for (let i = 0; i < arguments.length; i++)
			...;
	}
_ «arguments» n'est pas disponible dans les fonctions fléchées.

• en ES6, il y a les paramètres de reste («rest parameter») :
le paramètre de reste est un TABLEAU
	fonc(a, b, ...args) {		#→	args sera un tableau
		//réutilise les mêmes paramètres – ici sans a et b
		otherFunc(...args);
		if (args.length > 0) {
			//chaque élément du tableau est accessible
			fonc2(args[0], args[1]);
		}
	}
_ le paramètre de reste est aussi décomposable en variables distinctes :
	fonc(...[a, b, c] )
→ les 3 premiers paramètres sont nommés et accessibles – mais pas les suivants !


• OPÉRATEUR DE DESTRUCTURATION / « SPREAD » :
	tbl = [a, b]
	function f(p1, p2) {... }

	f(...tbl)     // le tableau est décomposé en son contenu

	biggerTbl = [ ...tbl, x, y ]    // biggerTbl débute par le contenu de tbl

	var obj1 = {ch1: 1; ch2: 2}  //les propriétés de obj1 sont copiées dans obj2
	obj2 = { ...obj1, ch3: 3, ch4: 4 }

• ASSIGNATION DÉSTRUCTURANTE :
	let a, b,
		allTheRest;
	[ a, b ] = [v1, v2];
		# → a = v1,
		#   a = v2
	[ a, b, ...allTheRest] = [1, 2, 4, 8, 16];
		# → a = 1,
		#   b = 2,
		#   allTheRest = [4, 8, 16];



● FONCTIONS FLÉCHÉES (ARROW FUNCTIONS) – ES6 :
	const fonc = (a,b) => a + b;
	const fonc = (name) => { console.log(name) }
	[12, 14, 25, 13].filter( age => age < 18 )

- pas d'objet «arguments»
- le «this» est celui du contexte de déclaration
- ne peuvent servir de constructeur
- ne peut utiliser «yield»

• attention à la syntaxe :
– RENVOYER UN OBJET :
Les parenthèses évitent l'interprétation des accolades comme bloc de code.
	a => ( {val: a} )
_ reprendre une variable d'entrée dans la construction d'un objet créé
 UN CHAMPS DE MÊME NOM ET VALEUR :
	value => ({ value, double: a*2 })

• armer une variable à une fonction SSI cette variable est nulle :
	var = var || fonc() {};
	var = var || ( () => {} );	//nécessite des parentèses englobantes !

• décomposition des variables et valeurs par défaut :
	fonc = (  a, b,         ,     c              )  => ...
	fonc = ( [a, b] = [1, 2], {x: c} = {x: a + b}) => a + b + c;



● UN EXEMPLE DE SYNTAXE TORDUE MAIS LÉGALE :
findMissingLetter= (a) => (
		s = 'harCode',
		t = 'map',
		n = a[t]( c => c['c'+s+'At']() ), //== c[charCodeAt]() == c.charCodeAt()
		m = Math.min(...n),
		String['fromC'+s]( m + n[t]( n => n-m ).reduce( (x,n,i) => x^n^(1+i),
														0
													  )
						 )
)



● MODULES ES6 :
	import * from './nomFichierSansPointJs';
	import symbol from './nomSansPointJs';

un peu comme les IIFE ...

----------------------------------------JQuery----------------------------------

● jquery notable :
• animations :
	.smoothScroll()
	.hide()/.show()

	.prop(propriété, valeur) ← prop' d'un élément html


• tester si une option particulière a été choisie dans un élément <select> :
On ne peut pas faire confiance à la propriété «value» quand la liste d' <option>
 est générée à partir de sources variables ...
Donc on peut attribuer un id à l'<option> :
	if ( 'id-attendu' == $('#id-du-select option:selected').attr('id') ) {...}

• jouer sur la visibilité d'une modale boostrap :
	$('#id-modale').modal(['hide'|'show'|'toggle']);


•AJAX :
_ requête GET :
provoqué par l'emploi d'une f° en 2e param'
	$('...').load('page.html', function {
		... modifications de code ...
	});

_ et POST :
provoqué par l'emploi d'un tableau de valeurs à passer en paramètres au POST
	$('...').load(url, [ param1: 'val1', param2: 'val2' ] );

• les méthodes $.ajax(), $.get() et $.post() acceptent toutes j'ajout de
 callbacks supplémentaires :
	$post( url, données, function(datas, status) {
		...
	}).done( function() {
		...
	}).fail( function() {
		...
	}).always( function() {
		...
	});

• AJAX avancé :
	$.get('page.html', function(dataToInsert) {
		$('...').html(dataToInsert);
	});

	$.post('page.html', function(dataToInsert) {
		$('...').html(dataToInsert);
	});

	$.javax(url, options)
		→ la méthode la plus avancée mais la moins simple à utiliser


● plugins jquery d'intérêt:
	dataTable   - affichage de tableau triable, recherchable, éditable


• calendrier avancé :
	fullCalendar    - affichage d'événement, etc.

